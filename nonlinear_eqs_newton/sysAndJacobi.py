import numpy as np


def matrix(x):
    return np.array([
        [np.cos(x[1][0] * x[0][0]) - np.exp(-3 * x[2][0]) + x[3][0] * x[4][0] ** 2 - x[5][0] - np.sinh(2 * x[7][0]) * x[8][0] + 2 * x[9][0] + 2.000433974165385440],
        [np.sin(x[1][0] * x[0][0]) + x[2][0] * x[8][0] * x[6][0] - np.exp(-x[9][0] + x[5][0]) + 3 * x[4][0] ** 2 - x[5][0] * (x[7][0] + 1) + 10.886272036407019994],
        [x[0][0] - x[1][0] + x[2][0] - x[3][0] + x[4][0] - x[5][0] + x[6][0] - x[7][0] + x[8][0] - x[9][0] - 3.1361904761904761904],
        [2 * np.cos(-x[8][0] + x[3][0]) + x[4][0] / (x[2][0] + x[0][0]) - np.sin(x[1][0] ** 2) + np.cos(x[6][0] * x[9][0]) ** 2 - x[7][0] - 0.1707472705022304757],
        [np.sin(x[4][0]) + 2 * x[7][0] * (x[2][0] + x[0][0]) - np.exp(-x[6][0] * (-x[9][0] + x[5][0])) + 2 * np.cos(x[1][0]) - 1.0 / (-x[8][0] + x[3][0]) - 0.3685896273101277862],
        [np.exp(x[0][0] - x[3][0] - x[8][0]) + x[4][0] ** 2 / x[7][0] + np.cos(3 * x[9][0] * x[1][0]) / 2 - x[5][0] * x[2][0] + 2.0491086016771875115],
        [x[1][0] ** 3 * x[6][0] - np.sin(x[9][0] / x[4][0] + x[7][0]) + (x[0][0] - x[5][0]) * np.cos(x[3][0]) + x[2][0] - 0.7380430076202798014],
        [x[4][0] * (x[0][0] - 2 * x[5][0]) ** 2 - 2 * np.sin(-x[8][0] + x[2][0]) + 0.15e1 * x[3][0] - np.exp(x[1][0] * x[6][0] + x[9][0]) + 3.5668321989693809040],
        [7 / x[5][0] + np.exp(x[4][0] + x[3][0]) - 2 * x[1][0] * x[7][0] * x[9][0] * x[6][0] + 3 * x[8][0] - 3 * x[0][0] - 8.4394734508383257499],
        [x[9][0] * x[0][0] + x[8][0] * x[1][0] - x[7][0] * x[2][0] + np.sin(x[3][0] + x[4][0] + x[5][0]) * x[6][0] - 0.78238095238095238096]])

def jacobiMatrix(x):
    return np.array([[-x[1][0] * np.sin(x[1][0] * x[0][0]), -x[0][0] * np.sin(x[1][0] * x[0][0]), 3 * np.exp(-3 * x[2][0]), x[4][0] ** 2, 2 * x[3][0] * x[4][0],
        -1, 0, -2 * np.cosh(2 * x[7][0]) * x[8][0], -np.sinh(2 * x[7][0]), 2],
        [x[1][0] * np.cos(x[1][0] * x[0][0]), x[0][0] * np.cos(x[1][0] * x[0][0]), x[8][0] * x[6][0], 0, 6 * x[4][0],
        -np.exp(-x[9][0] + x[5][0]) - x[7][0] - 1, x[2][0] * x[8][0], -x[5][0], x[2][0] * x[6][0], np.exp(-x[9][0] + x[5][0])],
        [1, -1, 1, -1, 1, -1, 1, -1, 1, -1],
        [-x[4][0] / (x[2][0] + x[0][0]) ** 2, -2 * x[1][0] * np.cos(x[1][0] ** 2), -x[4][0] / (x[2][0] + x[0][0]) ** 2, -2 * np.sin(-x[8][0] + x[3][0]),
        1.0 / (x[2][0] + x[0][0]), 0, -2 * np.cos(x[6][0] * x[9][0]) * x[9][0] * np.sin(x[6][0] * x[9][0]), -1,
        2 * np.sin(-x[8][0] + x[3][0]), -2 * np.cos(x[6][0] * x[9][0]) * x[6][0] * np.sin(x[6][0] * x[9][0])],
        [2 * x[7][0], -2 * np.sin(x[1][0]), 2 * x[7][0], 1.0 / (-x[8][0] + x[3][0]) ** 2, np.cos(x[4][0]),
        x[6][0] * np.exp(-x[6][0] * (-x[9][0] + x[5][0])), -(x[9][0] - x[5][0]) * np.exp(-x[6][0] * (-x[9][0] + x[5][0])), 2 * x[2][0] + 2 * x[0][0],
        -1.0 / (-x[8][0] + x[3][0]) ** 2, -x[6][0] * np.exp(-x[6][0] * (-x[9][0] + x[5][0]))],
        [np.exp(x[0][0] - x[3][0] - x[8][0]), -1.5 * x[9][0] * np.sin(3 * x[9][0] * x[1][0]), -x[5][0],-np.exp(x[0][0] - x[3][0] - x[8][0]),
        2 * x[4][0] / x[7][0], -x[2][0], 0, -x[4][0] ** 2 / x[7][0] ** 2, -np.exp(x[0][0] - x[3][0] - x[8][0]), -1.5 * x[1][0] * np.sin(3 * x[9][0] * x[1][0])],
        [np.cos(x[3][0]), 3 * x[1][0] ** 2 * x[6][0], 1, -(x[0][0] - x[5][0]) * np.sin(x[3][0]), x[9][0] / x[4][0] ** 2 * np.cos(x[9][0] / x[4][0] + x[7][0]),
        -np.cos(x[3][0]), x[1][0] ** 3, -np.cos(x[9][0] / x[4][0] + x[7][0]), 0, -1.0 / x[4][0] * np.cos(x[9][0] / x[4][0] + x[7][0])],
        [2 * x[4][0] * (x[0][0] - 2 * x[5][0]), -x[6][0] * np.exp(x[1][0] * x[6][0] + x[9][0]), -2 * np.cos(-x[8][0] + x[2][0]), 1.5,
        (x[0][0] - 2 * x[5][0]) ** 2, -4 * x[4][0] * (x[0][0] - 2 * x[5][0]), -x[1][0] * np.exp(x[1][0] * x[6][0] + x[9][0]), 0, 2 * np.cos(-x[8][0] + x[2][0]),
        -np.exp(x[1][0] * x[6][0] + x[9][0])],
        [-3, -2 * x[7][0] * x[9][0] * x[6][0], 0, np.exp(x[4][0] + x[3][0]), np.exp(x[4][0] + x[3][0]),
        -7.0 / x[5][0] ** 2, -2 * x[1][0] * x[7][0] * x[9][0], -2 * x[1][0] * x[9][0] * x[6][0], 3, -2 * x[1][0] * x[7][0] * x[6][0]],
        [x[9][0], x[8][0], -x[7][0], np.cos(x[3][0] + x[4][0] + x[5][0]) * x[6][0], np.cos(x[3][0] + x[4][0] + x[5][0]) * x[6][0],
        np.cos(x[3][0] + x[4][0] + x[5][0]) * x[6][0], np.sin(x[3][0] + x[4][0] + x[5][0]), -x[2][0], x[1][0], x[0][0]]])


def matrixForList(x):
    return np.array([
        np.cos(x[1] * x[0]) - np.exp(-3 * x[2]) + x[3] * x[4] ** 2 - x[5] - np.sinh(2 * x[7]) * x[8] + 2 * x[9] + 2.000433974165385440,
        np.sin(x[1] * x[0]) + x[2] * x[8] * x[6] - np.exp(-x[9] + x[5]) + 3 * x[4] ** 2 - x[5] * (x[7] + 1) + 10.886272036407019994,
        x[0] - x[1] + x[2] - x[3] + x[4] - x[5] + x[6] - x[7] + x[8] - x[9] - 3.1361904761904761904,
        2 * np.cos(-x[8] + x[3]) + x[4] / (x[2] + x[0]) - np.sin(x[1] ** 2) + np.cos(x[6] * x[9]) ** 2 - x[7] - 0.1707472705022304757,
        np.sin(x[4]) + 2 * x[7] * (x[2] + x[0]) - np.exp(-x[6] * (-x[9] + x[5])) + 2 * np.cos(x[1]) - 1.0 / (-x[8] + x[3]) - 0.3685896273101277862,
        np.exp(x[0] - x[3] - x[8]) + x[4] ** 2 / x[7] + np.cos(3 * x[9] * x[1]) / 2 - x[5] * x[2] + 2.0491086016771875115,
        x[1] ** 3 * x[6] - np.sin(x[9] / x[4] + x[7]) + (x[0] - x[5]) * np.cos(x[3]) + x[2] - 0.7380430076202798014,
        x[4] * (x[0] - 2 * x[5]) ** 2 - 2 * np.sin(-x[8] + x[2]) + 0.15e1 * x[3] - np.exp(x[1] * x[6] + x[9]) + 3.5668321989693809040,
        7 / x[5] + np.exp(x[4] + x[3]) - 2 * x[1] * x[7] * x[9] * x[6] + 3 * x[8] - 3 * x[0] - 8.4394734508383257499,
        x[9] * x[0] + x[8] * x[1] - x[7] * x[2] + np.sin(x[3] + x[4] + x[5]) * x[6] - 0.78238095238095238096])


